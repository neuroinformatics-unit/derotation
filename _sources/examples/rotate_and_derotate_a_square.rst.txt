
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/rotate_and_derotate_a_square.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_rotate_and_derotate_a_square.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_rotate_and_derotate_a_square.py:


Rotate and derotate a sample image
==================================

This tutorial demonstrates how to simulate the effect of a line-by-line
rotation in a line-scanning microscope and how to correct for it using
the `derotation` module.

We will:
    - Create a synthetic image.
    - Simulate the effect of per-line rotation over a stack of frames.
    - Apply derotation to revert to the original image.
    - Visualise the original, rotated, and derotated images.
    - Explore the effect of varying rotation angles.

.. GENERATED FROM PYTHON SOURCE LINES 19-21

Imports
-------

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np

    from derotation.derotate_by_line import derotate_an_image_array_line_by_line
    from derotation.simulate.line_scanning_microscope import Rotator








.. GENERATED FROM PYTHON SOURCE LINES 28-32

Create synthetic image
----------------------
We generate a 100x100 image with horizontal bands of varying intensity.
This will help visualise the rotation effects clearly.

.. GENERATED FROM PYTHON SOURCE LINES 32-52

.. code-block:: Python


    image = np.empty((100, 100))
    gray_values = [i % 5 * 100 + 155 for i in range(100)]
    for i in range(100):
        image[i] = gray_values[i]

    # Add a black border for easier visual inspection

    image[:20] = 0
    image[-20:] = 0
    image[:, :20] = 0
    image[:, -20:] = 0

    # Show the synthetic image

    plt.imshow(image, cmap="gray")
    plt.title("Original synthetic image")
    plt.axis("off")
    plt.show()




.. image-sg:: /examples/images/sphx_glr_rotate_and_derotate_a_square_001.png
   :alt: Original synthetic image
   :srcset: /examples/images/sphx_glr_rotate_and_derotate_a_square_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-57

Generate stack and simulate rotation
------------------------------------
We'll make a stack of 3 frames and simulate a line-by-line rotation using
increasing angles for each line.

.. GENERATED FROM PYTHON SOURCE LINES 57-72

.. code-block:: Python


    image_stack = np.array([image, image, image])
    num_lines = image_stack.shape[0] * image_stack.shape[1]
    angles = np.arange(num_lines)  # 0 to num_lines-1 degrees

    # Print info about the angles

    print(f"Total number of angles: {len(angles)}")
    print(f"Angle range: {angles.min()}° to {angles.max()}°")

    # Simulate rotation

    rotator = Rotator(angles, image_stack)
    rotated_image_stack = rotator.rotate_by_line()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Total number of angles: 300
    Angle range: 0° to 299°
      0%|          | 0/3 [00:00<?, ?it/s]    100%|██████████| 3/3 [00:00<00:00, 35.35it/s]




.. GENERATED FROM PYTHON SOURCE LINES 73-76

Apply derotation
----------------
Use our derotation method to revert the rotated images.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: Python


    rotated_image_stack_derotated = derotate_an_image_array_line_by_line(
        rotated_image_stack, angles
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/300 [00:00<?, ?it/s]    100%|██████████| 300/300 [00:00<00:00, 27296.60it/s]




.. GENERATED FROM PYTHON SOURCE LINES 82-84

Plot original, rotated, and derotated images
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 84-122

.. code-block:: Python


    num_frames = len(rotated_image_stack)
    fig, ax = plt.subplots(2, num_frames, figsize=(5 * num_frames, 8))

    # Plot rotated images with angle labels

    for i in range(num_frames):
        ax[0, i].imshow(rotated_image_stack[i], cmap="gray")
        ax[0, i].set_title(f"Rotated image {i + 1}")
        ax[0, i].axis("off")

        # Get angle slice for this frame
        angle_slice = rotator.angles[i * num_lines : (i + 1) * num_lines]
        if angle_slice.size > 0:
            angle_range = f"{angle_slice.min():.0f}–{angle_slice.max():.0f}°"
            ax[0, i].text(
                0.5,
                0.9,
                angle_range,
                horizontalalignment="center",
                verticalalignment="center",
                transform=ax[0, i].transAxes,
                color="white",
                fontsize=10,
                bbox=dict(facecolor="black", alpha=0.5, boxstyle="round"),
            )

    # Plot derotated images

    for i in range(num_frames):
        ax[1, i].imshow(rotated_image_stack_derotated[i], cmap="gray")
        ax[1, i].set_title(f"Derotated image {i + 1}")
        ax[1, i].axis("off")

    plt.tight_layout()
    plt.show()





.. image-sg:: /examples/images/sphx_glr_rotate_and_derotate_a_square_002.png
   :alt: Rotated image 1, Rotated image 2, Rotated image 3, Derotated image 1, Derotated image 2, Derotated image 3
   :srcset: /examples/images/sphx_glr_rotate_and_derotate_a_square_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 123-128

Conclusion
----------
We have simulated a rotating image acquisition scenario, applied derotation
to correct the distortions, and visualised the impact of line-by-line
rotation. Notice how the derotated images recover the original structure.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.349 seconds)


.. _sphx_glr_download_examples_rotate_and_derotate_a_square.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/neuroinformatics-unit/derotation/gh-pages?filepath=notebooks/examples/rotate_and_derotate_a_square.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: rotate_and_derotate_a_square.ipynb <rotate_and_derotate_a_square.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: rotate_and_derotate_a_square.py <rotate_and_derotate_a_square.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: rotate_and_derotate_a_square.zip <rotate_and_derotate_a_square.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
