"""
Full pipeline integration: simulate and find center of rotation
================================================================

This tutorial demonstrates the integration of the full derotation pipeline,
including simulation of a tilted rotation plane and the incremental search
for the center of rotation.

We will:
- Generate synthetic line-scanning image stacks.
- Simulate out-of-plane and oriented rotations.
- Run the complete `integration_pipeline()` to test derotation accuracy.
- Automatically display the plots generated by the pipeline.

"""

# %%
# Imports
# -------
from pathlib import Path

from IPython.display import Image, display

from derotation.simulate.synthetic_data import SyntheticData

# %%
# Define parameters for the synthetic simulation
# ----------------------------------------------

rotation_plane_angle = 10  # degrees
rotation_plane_orientation = 30  # degrees
center_of_rotation_offset = (7, -7)  # pixels

# %%
# Run full pipeline
# -----------------
# This will generate simulated rotated data and run an incremental search
# to find the optimal center of rotation.
# All intermediate plots are saved in the "debug" folder.

s_data = SyntheticData(
    radius=2,
    center_of_rotation_offset=center_of_rotation_offset,
    rotation_plane_angle=rotation_plane_angle,
    rotation_plane_orientation=rotation_plane_orientation,
    num_frames=50,
    pad=20,
    background_value=80,
    plots=True,
)

s_data.integration_pipeline()

# %%
# Display relevant plots
# -----------------------
# Let's display some of the plots generated during the pipeline.

debug_folder = Path("debug")
debug_images = sorted(debug_folder.glob("*.png"))

print(f"Found {len(debug_images)} plots in debug/")

for img_path in debug_images:
    # print(f"\n{img_path.name}")
    # display(Image(filename=str(img_path)))
    if "derotated_sinusoidal" in img_path.name:
        print("Derotated frames across different angles")
        display(Image(filename=str(img_path)))
    elif "ellipse_fit" in img_path.name:
        print("Ellipse fitting to find center of rotation")
        display(Image(filename=str(img_path)))
    elif "mean_projection" in img_path.name:
        print("Mean projection of the rotated stack")
        display(Image(filename=str(img_path)))
    elif "rotation_angles" in img_path.name:
        print("Rotation angles")
        display(Image(filename=str(img_path)))
