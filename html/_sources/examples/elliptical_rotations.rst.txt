
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/elliptical_rotations.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_elliptical_rotations.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_elliptical_rotations.py:


Simulate out-of-plane rotation during line-scanning acquisition
===============================================================

In this tutorial, we simulate how image stacks appear when the scanning
happens across a plane that is *not aligned* with the imaging plane.

We will:
    - Generate synthetic 2D frames with circular cell structures.
    - Simulate line-by-line rotations with varying angles.
    - Visualise how the appearance of the image is distorted when the rotation
      plane is tilted or oriented differently.
    - Display all frames and a max projection.

.. GENERATED FROM PYTHON SOURCE LINES 18-20

Imports
-------

.. GENERATED FROM PYTHON SOURCE LINES 20-27

.. code-block:: Python

    from pathlib import Path

    import matplotlib.pyplot as plt

    from derotation.simulate.line_scanning_microscope import Rotator
    from derotation.simulate.synthetic_data import SyntheticData








.. GENERATED FROM PYTHON SOURCE LINES 28-30

Define rotation + plotting functions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 30-90

.. code-block:: Python



    def rotate_image_stack(
        plane_angle: float = 0,
        pad: int = 20,
        orientation: float = 0,
    ):
        """
        Create and rotate a synthetic image stack using the specified
        rotation parameters.
        """
        s_data = SyntheticData(
            radius=1,
            second_cell=False,
            pad=pad,
            background_value=80,
            num_frames=50,
        )
        s_data.image = s_data.create_sample_image_with_cells()
        image_stack = s_data.create_image_stack()
        _, angles = s_data.create_rotation_angles(image_stack.shape)

        rotator = Rotator(
            angles,
            image_stack,
            rotation_plane_angle=plane_angle,
            blank_pixel_val=0,
            rotation_plane_orientation=orientation,
        )
        rotated_image_stack = rotator.rotate_by_line()

        return image_stack, rotated_image_stack, rotator, image_stack.shape[0]


    def make_plot(
        rotated_image_stack,
        title="",
    ):
        """
        Plot all frames of the rotated stack and their associated angles.
        """
        fig, ax = plt.subplots(figsize=(12, 6))

        max_proj = rotated_image_stack.max(axis=0)
        ax.imshow(max_proj, cmap="gray", vmin=0, vmax=255)
        ax.plot(
            max_proj.shape[1] / 2,
            max_proj.shape[0] / 2,
            "rx",
            markersize=10,
        )
        ax.set_title("Max projection")
        ax.axis("off")

        plt.tight_layout()
        plt.suptitle(title, fontsize=14)
        plt.subplots_adjust(top=0.92)
        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 91-92

Create output folder

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    Path("debug").mkdir(exist_ok=True)








.. GENERATED FROM PYTHON SOURCE LINES 95-100

Example 1 – rotation out of imaging plane
-----------------------------------------
Here we simulate a 25° tilt in the rotation plane, with no orientation
shift. This simulates a case where the imaging scan plane is not aligned
with the rotation axis.

.. GENERATED FROM PYTHON SOURCE LINES 100-113

.. code-block:: Python


    image_stack, rotated_image_stack, rotator, num_frames = rotate_image_stack(
        plane_angle=25, pad=20
    )

    print("Rotation plane angle: 25°")
    print("Rotation orientation: 0°")

    make_plot(
        rotated_image_stack,
        title="Out-of-plane rotation (25° tilt)",
    )




.. image-sg:: /examples/images/sphx_glr_elliptical_rotations_001.png
   :alt: Out-of-plane rotation (25° tilt), Max projection
   :srcset: /examples/images/sphx_glr_elliptical_rotations_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/50 [00:00<?, ?it/s]      2%|▏         | 1/50 [00:00<00:07,  6.80it/s]      4%|▍         | 2/50 [00:00<00:07,  6.76it/s]      6%|▌         | 3/50 [00:00<00:06,  6.75it/s]      8%|▊         | 4/50 [00:00<00:06,  6.76it/s]     10%|█         | 5/50 [00:00<00:06,  6.74it/s]     12%|█▏        | 6/50 [00:00<00:06,  6.77it/s]     14%|█▍        | 7/50 [00:01<00:06,  6.73it/s]     16%|█▌        | 8/50 [00:01<00:06,  6.74it/s]     18%|█▊        | 9/50 [00:01<00:06,  6.77it/s]     20%|██        | 10/50 [00:01<00:05,  6.77it/s]     22%|██▏       | 11/50 [00:01<00:05,  6.75it/s]     24%|██▍       | 12/50 [00:01<00:05,  6.71it/s]     26%|██▌       | 13/50 [00:01<00:05,  6.68it/s]     28%|██▊       | 14/50 [00:02<00:05,  6.66it/s]     30%|███       | 15/50 [00:02<00:05,  6.67it/s]     32%|███▏      | 16/50 [00:02<00:05,  6.70it/s]     34%|███▍      | 17/50 [00:02<00:04,  6.73it/s]     36%|███▌      | 18/50 [00:02<00:04,  6.74it/s]     38%|███▊      | 19/50 [00:02<00:04,  6.72it/s]     40%|████      | 20/50 [00:02<00:04,  6.75it/s]     42%|████▏     | 21/50 [00:03<00:04,  6.73it/s]     44%|████▍     | 22/50 [00:03<00:04,  6.74it/s]     46%|████▌     | 23/50 [00:03<00:04,  6.74it/s]     48%|████▊     | 24/50 [00:03<00:03,  6.75it/s]     50%|█████     | 25/50 [00:03<00:03,  6.75it/s]     52%|█████▏    | 26/50 [00:03<00:03,  6.75it/s]     54%|█████▍    | 27/50 [00:04<00:03,  6.75it/s]     56%|█████▌    | 28/50 [00:04<00:03,  6.75it/s]     58%|█████▊    | 29/50 [00:04<00:03,  6.76it/s]     60%|██████    | 30/50 [00:04<00:02,  6.74it/s]     62%|██████▏   | 31/50 [00:04<00:02,  6.76it/s]     64%|██████▍   | 32/50 [00:04<00:02,  6.43it/s]     66%|██████▌   | 33/50 [00:04<00:02,  6.23it/s]     68%|██████▊   | 34/50 [00:05<00:02,  6.39it/s]     70%|███████   | 35/50 [00:05<00:02,  6.50it/s]     72%|███████▏  | 36/50 [00:05<00:02,  6.55it/s]     74%|███████▍  | 37/50 [00:05<00:02,  6.49it/s]     76%|███████▌  | 38/50 [00:05<00:01,  6.52it/s]     78%|███████▊  | 39/50 [00:05<00:01,  6.55it/s]     80%|████████  | 40/50 [00:06<00:01,  6.58it/s]     82%|████████▏ | 41/50 [00:06<00:01,  6.59it/s]     84%|████████▍ | 42/50 [00:06<00:01,  6.65it/s]     86%|████████▌ | 43/50 [00:06<00:01,  6.68it/s]     88%|████████▊ | 44/50 [00:06<00:00,  6.68it/s]     90%|█████████ | 45/50 [00:06<00:00,  6.72it/s]     92%|█████████▏| 46/50 [00:06<00:00,  6.72it/s]     94%|█████████▍| 47/50 [00:07<00:00,  6.73it/s]     96%|█████████▌| 48/50 [00:07<00:00,  6.73it/s]     98%|█████████▊| 49/50 [00:07<00:00,  6.74it/s]    100%|██████████| 50/50 [00:07<00:00,  6.74it/s]    100%|██████████| 50/50 [00:07<00:00,  6.68it/s]
    Rotation plane angle: 25°
    Rotation orientation: 0°




.. GENERATED FROM PYTHON SOURCE LINES 114-118

Example 2 – rotation + in-plane orientation
-------------------------------------------
Now we also add a 45° orientation to the rotation plane, so it's both tilted
and diagonally oriented relative to the image.

.. GENERATED FROM PYTHON SOURCE LINES 118-131

.. code-block:: Python


    image_stack, rotated_image_stack, rotator, num_frames = rotate_image_stack(
        plane_angle=25, pad=20, orientation=45
    )

    print("Rotation plane angle: 25°")
    print("Rotation orientation: 45°")

    make_plot(
        rotated_image_stack,
        title="Tilted + Oriented Rotation Plane (25°, 45°)",
    )




.. image-sg:: /examples/images/sphx_glr_elliptical_rotations_002.png
   :alt: Tilted + Oriented Rotation Plane (25°, 45°), Max projection
   :srcset: /examples/images/sphx_glr_elliptical_rotations_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/50 [00:00<?, ?it/s]      2%|▏         | 1/50 [00:00<00:14,  3.45it/s]      4%|▍         | 2/50 [00:00<00:13,  3.44it/s]      6%|▌         | 3/50 [00:00<00:13,  3.43it/s]      8%|▊         | 4/50 [00:01<00:13,  3.42it/s]     10%|█         | 5/50 [00:01<00:13,  3.41it/s]     12%|█▏        | 6/50 [00:01<00:12,  3.41it/s]     14%|█▍        | 7/50 [00:02<00:12,  3.41it/s]     16%|█▌        | 8/50 [00:02<00:12,  3.42it/s]     18%|█▊        | 9/50 [00:02<00:11,  3.43it/s]     20%|██        | 10/50 [00:02<00:11,  3.43it/s]     22%|██▏       | 11/50 [00:03<00:11,  3.41it/s]     24%|██▍       | 12/50 [00:03<00:11,  3.39it/s]     26%|██▌       | 13/50 [00:03<00:10,  3.39it/s]     28%|██▊       | 14/50 [00:04<00:10,  3.39it/s]     30%|███       | 15/50 [00:04<00:10,  3.40it/s]     32%|███▏      | 16/50 [00:04<00:09,  3.41it/s]     34%|███▍      | 17/50 [00:04<00:09,  3.42it/s]     36%|███▌      | 18/50 [00:05<00:09,  3.42it/s]     38%|███▊      | 19/50 [00:05<00:09,  3.42it/s]     40%|████      | 20/50 [00:05<00:08,  3.43it/s]     42%|████▏     | 21/50 [00:06<00:08,  3.43it/s]     44%|████▍     | 22/50 [00:06<00:08,  3.43it/s]     46%|████▌     | 23/50 [00:06<00:07,  3.43it/s]     48%|████▊     | 24/50 [00:07<00:07,  3.43it/s]     50%|█████     | 25/50 [00:07<00:07,  3.43it/s]     52%|█████▏    | 26/50 [00:07<00:06,  3.43it/s]     54%|█████▍    | 27/50 [00:07<00:06,  3.43it/s]     56%|█████▌    | 28/50 [00:08<00:06,  3.43it/s]     58%|█████▊    | 29/50 [00:08<00:06,  3.43it/s]     60%|██████    | 30/50 [00:08<00:05,  3.42it/s]     62%|██████▏   | 31/50 [00:09<00:05,  3.43it/s]     64%|██████▍   | 32/50 [00:09<00:05,  3.42it/s]     66%|██████▌   | 33/50 [00:09<00:04,  3.40it/s]     68%|██████▊   | 34/50 [00:09<00:04,  3.42it/s]     70%|███████   | 35/50 [00:10<00:04,  3.42it/s]     72%|███████▏  | 36/50 [00:10<00:04,  3.42it/s]     74%|███████▍  | 37/50 [00:10<00:03,  3.41it/s]     76%|███████▌  | 38/50 [00:11<00:03,  3.40it/s]     78%|███████▊  | 39/50 [00:11<00:03,  3.40it/s]     80%|████████  | 40/50 [00:11<00:02,  3.41it/s]     82%|████████▏ | 41/50 [00:11<00:02,  3.42it/s]     84%|████████▍ | 42/50 [00:12<00:02,  3.43it/s]     86%|████████▌ | 43/50 [00:12<00:02,  3.43it/s]     88%|████████▊ | 44/50 [00:12<00:01,  3.42it/s]     90%|█████████ | 45/50 [00:13<00:01,  3.43it/s]     92%|█████████▏| 46/50 [00:13<00:01,  3.43it/s]     94%|█████████▍| 47/50 [00:13<00:00,  3.43it/s]     96%|█████████▌| 48/50 [00:14<00:00,  3.43it/s]     98%|█████████▊| 49/50 [00:14<00:00,  3.43it/s]    100%|██████████| 50/50 [00:14<00:00,  3.42it/s]    100%|██████████| 50/50 [00:14<00:00,  3.42it/s]
    Rotation plane angle: 25°
    Rotation orientation: 45°




.. GENERATED FROM PYTHON SOURCE LINES 132-138

Conclusion
----------
This simulation helps us visualise how image distortions appear during
line-scanning acquisition when the imaging plane is misaligned with the
physical rotation plane. The observed distortions depend on both the *angle*
of the rotation plane and its *orientation* in space.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.252 seconds)


.. _sphx_glr_download_examples_elliptical_rotations.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/neuroinformatics-unit/derotation/gh-pages?filepath=notebooks/examples/elliptical_rotations.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: elliptical_rotations.ipynb <elliptical_rotations.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: elliptical_rotations.py <elliptical_rotations.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: elliptical_rotations.zip <elliptical_rotations.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
